set +o history

# key shortcuts - bosh
datestamp=$(date +"%Y%m%d%H%M")

export BOSH_DATACENTER=$(echo ${dc})

bd ()
{
    echo; printf "${YELLOW}BOSH_ENVIRONMENT${GREEN} ${BOSH_ENVIRONMENT}${CYAN}"
    echo ${GREEN}
    bosh2 deployments
    printf ${RESET}
    printf "${GREY} command: bosh2 deployments ${RESET}"
    echo
}

_be ()
{
echo
    printf "   ${YELLOW}BOSH_DATACENTER${GREEN} ${BOSH_DATACENTER:-${GREY}empty}${CYAN}"
    printf "   ${YELLOW}BOSH_ENVIRONMENT${GREEN} ${BOSH_ENVIRONMENT:-${GREY}empty}${CYAN}"
    printf "   ${YELLOW}BOSH_DEPLOYMENT${GREEN} ${BOSH_DEPLOYMENT:-${GREY}empty}${CYAN}"
    printf "   ${YELLOW}BOSH_INSTANCEID${GREEN} ${BOSH_INSTANCEID:-${GREY}empty}${CYAN}"
    printf ${RESET}
    echo
}

be ()
{
echo
    printf "   ${YELLOW}BOSH_DATACENTER${GREEN} ${BOSH_DATACENTER:-${GREY}empty}${CYAN}"
    printf "   ${YELLOW}BOSH_ENVIRONMENT${GREEN} ${BOSH_ENVIRONMENT:-${GREY}empty}${CYAN}"
    printf "   ${YELLOW}BOSH_DEPLOYMENT${GREEN} ${BOSH_DEPLOYMENT:-${GREY}empty}${CYAN}"
    printf "   ${YELLOW}BOSH_INSTANCEID${GREEN} ${BOSH_INSTANCEID:-${GREY}empty}${CYAN}"
    echo
}

bdl ()
{
    printf "${YELLOW}BOSH Deployments List${RESET}"
    echo ${CYAN}
    bd | cut -c1-20 | tr -d 'A-Z' \
      | tr '\012' ' ' | tr -s ' ' | tr ' ' '\012' \
      | grep -v ^$ | grep -v command \
      | grep -E 'command|\-' | grep -x '.\{8,27\}'
    echo ${RESET}; echo ''
}

# bosh env set
bes ()
{
    export BOSH_ENVIRONMENT=${1:-}
    be
}

# bosh dev set
bds ()
{
    export BOSH_DEPLOYMENT=${1:-}
    be
}

# bosh ins set
bis ()
{
    export BOSH_INSTANCEID=${1:-}
    be
}

# bosh dc set
dcs ()
{
     export BOSH_DATACENTER=${1:-}
     be
 }

# bosh hints
bh ()
{
  export BASE=$(echo ${GREEN})
  export HLIT=$(echo ${WHITE})
  export VLIT=$(echo ${BLUE})

printf ${BASE}
  printf "   ${VLIT}BOSH_DATACENTER${GREEN} ${BOSH_DATACENTER:-${GREY}empty}${CYAN}"
  printf "   ${VLIT}BOSH_ENVIRONMENT${GREEN} ${BOSH_ENVIRONMENT:-${GREY}empty}${CYAN}"
  printf "   ${VLIT}BOSH_DEPLOYMENT${GREEN} ${BOSH_DEPLOYMENT:-${GREY}empty}${CYAN}"
  printf "   ${VLIT}BOSH_INSTANCEID${GREEN} ${BOSH_INSTANCEID:-${GREY}empty}${CYAN}"

printf "
  ${BASE}
  MyEasy BOSH2 Hints
  ==============================
  bd       \t~ show deployments
  be       \t~ show CURRENT bosh ${HLIT}${BOSH_ENVIRONMENT:-${GREY}BOSH_ENVIRONMENT}${BASE} and ${HLIT}${BOSH_DEPLOYMENT:-${GREY}BOSH_DEPLOYMENT}${BASE}
  bh       \t~ Show THIS help page
  bi       \t~ Show instances [ ${HLIT}${BOSH_DEPLOYMENT:-${GREY}BOSH_DEPLOYMENT}${BASE} ]
  bl       \t~ bosh LOGIN [alias]
  bo       \t~ bosh LOGOUT
  bv       \t~ Show vitals [ ${HLIT}${BOSH_DEPLOYMENT:-${GREY}BOSH_DEPLOYMENT}${BASE} ]
  ---
  bsshi     \t~ ssh to selected ${HLIT}${BOSH_INSTANCEID:-${GREY}BOSH_INSTANCEID}
  ${BASE}
  ---
  bca       \t~ BOSH config archive
  bcs       \t~ BOSH config archive
  bdl       \t~ BOSH deployment list BETA

  ---
  bes       \t~ set BOSH_ENVIRONMENT
  bds       \t~ set BOSH_DEPLOYMENT
  bis       \t~ set BOSH_INSTANCEID
  dcs       \t~ set BOSH_DATACENTER

  replicaset \t~ 1: dc 2: tenant 3: replica set name suffix
             \t~ replicaset mia pcf-sandbox jdlt.

HOWTO ADVANCE BOSH
  bosh2 -e ${HLIT}${BOSH_ENVIRONMENT:-${GREY}BOSH_ENVIRONMENT}${BASE} -d ${HLIT}${BOSH_DEPLOYMENT:-${GREY}BOSH_DEPLOYMENT}${BASE} restart
  bosh2 -e ${HLIT}${BOSH_ENVIRONMENT:-${GREY}BOSH_ENVIRONMENT}${BASE} -d ${HLIT}${BOSH_DEPLOYMENT:-${GREY}BOSH_DEPLOYMENT}${BASE} recreate ${HLIT}${BOSH_INSTANCEID:-${GREY}BOSH_INSTANCEID} --fix
${BASE}
#
  bosh2 deploy
  bosh2 errands
#
  bosh2 cloud-config
  bosh2 releases
  bosh2 create-release --force
  bosh2 update-release
  bosh2 upload-release
#
${BASE}
  bosh2 -e ${HLIT}${BOSH_ENVIRONMENT:-${GREY}BOSH_ENVIRONMENT}${BASE} -d ${HLIT}${BOSH_DEPLOYMENT:-${GREY}BOSH_DEPLOYMENT}${BASE} ssh mongodb 'w' | grep stdout
  bosh2 -e ${HLIT}${BOSH_ENVIRONMENT:-${GREY}BOSH_ENVIRONMENT}${BASE} -d ${HLIT}${BOSH_DEPLOYMENT:-${GREY}BOSH_DEPLOYMENT}${BASE} ssh rs 'df -h' | grep stdout
#
  bosh2 instances --ps  : process health
#
  intro       \t~ https://ulti.quip.com/ov2mAgqv9OSF/BOSH-Intro
"
printf ${RESET}
}

# password hints
ph ()
{
printf "
MyEasy BOSH Password Hints
==============================
# MIA
    mom           \t~  safe get secret/mia/mongodb/director
    pcf           \t~  safe get secret/mia/dev/pcf/bosh
    ds-dev        \t~  safe get secret/mia/ds-dev/director  (StepMOM)
    deputy        \t~  safe get secret/mia/deputy-director
    pcf-sandbox   \t~  safe get secret/mia/pcf-sandbox/director

# ATL
    deputy        \t~ safe get secret/atl/deputy-director
    pcf           \t~ safe get secret/atl/prod/pcf/bosh
    ds-prod       \t~ safe get secret/atl/ds-prod/director
    mom           \t~ safe get secret/atl/mongodb-prod/director

# PHX
    deputy        \t~ safe get secret/phx/deputy-director
    pcf           \t~ safe get secret/phx/prod/pcf/bosh
    ds-prod       \t~ safe get secret/phx/ds-prod/director

# TOR
    deputy        \t~ safe get secret/tor/deputy-director
    pcf           \t~ safe get secret/tor/prod/pcf/bosh
    ds-prod       \t~ safe get secret/tor/ds-prod/director
"
}

# mongo hints
mh ()
{
printf "
  MYeasy MONGO Hints
  ==============================
  sd       \t~ show databases
  sc       \t~ show collections
  mh       \t~ Show THIS help page (MONGO HELPS)

  REF      \t~ https://docs.mongodb.com/manual/reference/mongo-shell/

  replicaset \t~ 1: dc 2: tenant 3: replica set name suffix
             \t~ replicaset mia pcf-sandbox jdlt.
"
}


# bosh show instances
bi ()
{
    echo; echo "${YELLOW}BOSH_ENVIRONMENT${GREEN} ${BOSH_ENVIRONMENT}${CYAN}"

    # replicaset=${1:-foo};
    # r=${1};
    DeploymentID=${1};

    if [ $# -lt 1 ] ; then {
        bosh2 instances
        return
    } else {
       bosh2 instances -d ${DeploymentID}
       return
        }
    fi

    printf "${RESET}"
    printf "${GREY} 'command: bosh2 instances -d ${BOSH_ENVIRONMENT}' ${RESET}"
    echo

}

# bosh vitals
bv ()
{
    if [ $# -lt 1 ] ; then {
        bosh2 instances --vitals
        return
    } else {
       bosh2 instances -d ${1} --vitals
       return
        }
    fi
}

# bosh login
bl ()
{
  if [ $# -lt 1 ] ; then {
      beep
      printf "${YELLOW}WARN: No Environmental Alias was provided"
      printf "      Please provide an alias from the following list: \n${WHITE}$( _bs )"
      printf "${RESET}"
      echo
      return
  } else {
     my_url=$(_burl ${1})
     #
     export "BOSH_ENVIRONMENT=${1}"
     printf "BOSH_ENVIRONMENT set to ${BOSH_ENVIRONMENT}"
     bosh2 -e ${1} login
     [ $? -ne 0 ] && { ph ; } || { _be ; }
     echo
     return
     }
  fi
}

# bosh logout
bo ()
{
    bosh2 log-out
}

# bosh ssh
bsshi ()
{
  printf "%s\n" "   ${VLIT}BOSH_DATACENTER${GREEN} ${BOSH_DATACENTER:-${GREY}empty}${CYAN}"
  printf "%s\n" "   ${VLIT}BOSH_ENVIRONMENT${GREEN} ${BOSH_ENVIRONMENT:-${GREY}empty}${CYAN}"
  printf "%s\n" "   ${VLIT}BOSH_DEPLOYMENT${GREEN} ${BOSH_DEPLOYMENT:-${GREY}empty}${CYAN}"
  printf "%s\n" "   ${VLIT}BOSH_INSTANCEID${GREEN} ${BOSH_INSTANCEID:-${GREY}empty}${CYAN}"

 echo; printf "Would you like to SSH to this instance"
 printf "bosh2 -e ${HLIT}${BOSH_ENVIRONMENT:-${GREY}BOSH_ENVIRONMENT}${BASE} -d ${HLIT}${BOSH_DEPLOYMENT:-${GREY}BOSH_DEPLOYMENT}${BASE} ssh ${HLIT}${BOSH_INSTANCEID:-${GREY}BOSH_INSTANCEID}"

 read -n1 -r -p "Press return to continue, any key to abort..." key
     if [ "$key" = '' ]; then
         bosh2 -e ${BOSH_ENVIRONMENT} -d ${BOSH_DEPLOYMENT} ssh ${BOSH_INSTANCEID}
     else
         echo "SSH ABORTED ${YELLOW}SSH REQUEST ABORTED${RESET}"
     fi

 printf ${RESET}
}

# bosh CONFIG archive
bca ()
{
    cp ~/.bosh/config ~/.bosh/config.${datestamp}
}

# bosh CONFIG status
bcs ()
{
    ls -l .bosh/config
    cat .bosh/config
}

# bosh status
_bs ()
{
    bosh2 envs | sort | uniq
}

# internal functions
# get URL
_burl ()
{
    echo ${GREEN}
    bosh2 envs | grep pcf-sandbox | awk '{print $1}' | tr -d ' ' | sort | uniq | head -1
    echo ${RESET}
}

set -o history
clear
bh
